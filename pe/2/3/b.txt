# PE2.3 Profiling tools

Profiling is explained for the CPU level, where it can be supported by hardware performance counters and by sampling techniques.

Sampling is used to see, by examining the program counter, what routines and source code lines of a program are responsible for which portions of the total runtime.

Automatically adding trace code to a parallel program by so-called instrumentation to record its execution in a strict chronology is explained and the difference to profiling is emphasized.

Similar techniques are explained for profiling the network level (e.g. based on InfiniBand counters and I/O server states).

## Learning Outcomes

* Demonstrate the use of Score-P for collecting program traces.
* Demonstrate the use of Scalasca for analyzing traces.
* Demonstrate the analysis of program traces using Vampir.
* Understand Darshan.
* Demonstrate PIKA to check the performance of anyprogram without instrumenting it.
* Demonstrate collecting traces of a program usig L02s.
* Demonstrate analysis program from NVIDIA for CUDA code.

## Subskills

* [[skill-tree:pe:2:3:1:b]]
* [[skill-tree:pe:2:3:2:b]]
* [[skill-tree:pe:2:3:3:b]]
* [[skill-tree:pe:2:3:4:b]]
* [[skill-tree:pe:2:3:5:b]]
* [[skill-tree:pe:2:3:6:b]]
* [[skill-tree:pe:2:3:7:b]]
