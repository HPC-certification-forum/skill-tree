# SD Software Development

Software engineering is often neglected in computational science.
However, it bears the potential to increase productivity by providing scaffolding for collaborative programming, reducing the coding errors and increasing the manageability of software.

## Learning Outcomes

* Apply software engineering methods and best practices when developing parallel applications.
* Write modular, reusable code by applying software design principles like loose coupling and information hiding.
* Configure and use integrated development environments (IDEs) to seamlessly perform the typical development cycle with the steps edit, build (compile and link), and test.
* Recognize where (parallel) programming idioms are violated and refactor the code to comply with a specific programming idiom.
* Define and establish coding standards and conventions in a project.
* Apply version and configuration management to the development of (parallel) programs in order to track and control changes in the sources and to establish and maintain consistency of the program or software system throughout its life.
* Appropriately document the entire software system.
* Demonstrate using a workflow management system for a given use case.

## Subskills

* [[skill-tree:sd:1:b]]
* [[skill-tree:sd:2:b]]
* [[skill-tree:sd:3:b]]
* [[skill-tree:sd:4:b]]
* [[skill-tree:sd:5:b]]
* [[skill-tree:sd:5:b]]
* [[skill-tree:sd:7:b]]
* [[skill-tree:sd:8:b]]
